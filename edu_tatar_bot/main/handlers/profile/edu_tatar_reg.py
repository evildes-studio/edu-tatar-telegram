from aiogram import types
from edu_tatar_bot.main.misc import dp, bot, config
from edu_tatar_bot.utils.db import User, session, EduTatarUser
from aiogram.dispatcher import FSMContext
from edu_tatar_bot.main.keyboards.markup import cancel_btn, validate_keyboard, start_keyboard
from edu_tatar_bot.classes.EduTatar import EduTatar
from edu_tatar_bot.classes.Parser import Parser
from edu_tatar_bot.classes.EduAccountReg import EduAccountReg


@dp.message_handler(state=EduAccountReg.ask_login)
async def set_login(message: types.Message, state: FSMContext):
    if len(message.text.strip()) == 10 and message.text.strip().isnumeric():
        await state.update_data(login=message.text.strip())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:")
        await EduAccountReg.ask_password.set()

    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞:",
                             reply_markup=cancel_btn())
        await EduAccountReg.ask_login.set()


@dp.message_handler(state=EduAccountReg.ask_password)
async def set_password(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text.strip())
    user_data = await state.get_data()
    message_ = await message.answer("–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏... –û–∂–∏–¥–∞–π—Ç–µ")

    edu_tatar = EduTatar(user_data['login'], user_data['password'])
    session_ = edu_tatar.auth()

    parser = Parser(session_)
    user_info = parser.get_user_info()
    session_.close()

    if user_info:
        await message_.edit_text(f"<b>–§–ò–û:</b> <i>{user_info['name']}</i>\n"
                                 f"<b>–®–∫–æ–ª–∞:</b> <i>{user_info['school']}</i>")
        await message.answer("–î–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞?", reply_markup=validate_keyboard())
        await state.update_data(user_info=user_info)
        await EduAccountReg.validation.set()
    else:
        await message_.edit_text("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–Ω–æ–≤–∞, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ edu.tatar.ru :")
        await EduAccountReg.ask_login.set()


@dp.message_handler(state=EduAccountReg.validation, text="–í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ")
async def validation_ok(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_info = user_data["user_info"]
    user = User.query.filter(User.chat_id == message.chat.id).first()
    user.edu_tatar.append(EduTatarUser(login=user_data["login"], password=user_data["password"],
                                       name=user_info["name"], school=user_info["school"]))
    session.commit()

    await state.finish()
    await message.answer("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ üî•",
                         reply_markup=start_keyboard())
